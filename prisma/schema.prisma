generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  VISITOR
  USER
  ADMIN
}

model Article {
  id          String   @id @default(cuid())
  title       String
  description String?
  author      String?
  fileName    String   @unique
  filePath    String
  fileSize    Int
  tags        String[]
  category    String?
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(true)
  isSealed    Boolean  @default(false)
}

model Billet {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String
  excerpt     String?
  tags        String[]
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isSealed    Boolean  @default(false)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  comments       Comment[]
  drafts         Draft[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Polymorphe: soit billet soit publication
  targetType String   // 'billet' | 'publication'
  targetId   String   // slug pour billets, id pour publications
  
  // Hiérarchie (max 2 niveaux)
  parentId   String?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")
  
  // Modération
  isApproved Boolean  @default(false)
  isVisible  Boolean  @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([targetType, targetId, createdAt])
  @@index([parentId, createdAt])
  @@index([isApproved, isVisible])
  @@index([authorId])
}

model Draft {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String?
  content   String
  tags      String[]
  excerpt   String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, updatedAt])
}

// ============================================
// Archive de conversations (FEU HUMAIN)
// ============================================

model ConversationArchive {
  id               String                    @id @default(cuid())
  title            String
  slug             String                    @unique
  description      String?
  threadType       String?
  participantCount Int                       @default(0)
  messageCount     Int                       @default(0)
  startDate        DateTime?
  endDate          DateTime?
  metadata         Json?
  isPublic         Boolean                   @default(false)
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  participants     ConversationParticipant[]
  messages         ConversationMessage[]
}

model ConversationParticipant {
  id             String                @id @default(cuid())
  archiveId      String
  name           String
  messageCount   Int                   @default(0)
  firstMessageAt DateTime?
  lastMessageAt  DateTime?
  metadata       Json?

  archive        ConversationArchive   @relation(fields: [archiveId], references: [id], onDelete: Cascade)
  messages       ConversationMessage[]
  reactions      ConversationReaction[]
}

model ConversationMessage {
  id             String                @id @default(cuid())
  archiveId      String
  participantId  String?
  senderName     String
  content        String?
  timestamp      BigInt
  timestampDate  DateTime
  messageType    String?               @default("text")
  metadata       Json?
  createdAt      DateTime              @default(now())

  archive        ConversationArchive   @relation(fields: [archiveId], references: [id], onDelete: Cascade)
  participant    ConversationParticipant? @relation(fields: [participantId], references: [id], onDelete: SetNull)
  media          ConversationMedia[]
  reactions      ConversationReaction[]

  @@index([archiveId, timestamp])
  @@index([participantId])
  @@index([timestamp])
}

model ConversationMedia {
  id                String              @id @default(cuid())
  messageId         String
  type              String              // 'photo' | 'video' | 'audio' | 'file'
  originalUri       String
  cloudinaryUrl     String?
  cloudinaryPublicId String?
  thumbnailUrl      String?
  fileName          String?
  fileSize          Int?
  mimeType          String?
  width             Int?
  height            Int?
  duration          Int?               // Pour vidéos/audio en secondes
  metadata          Json?
  createdAt         DateTime            @default(now())

  message           ConversationMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@index([type])
}

model ConversationReaction {
  id            String                   @id @default(cuid())
  messageId     String
  participantId String?
  actorName     String
  reaction      String
  timestamp     BigInt?
  createdAt     DateTime                 @default(now())

  message       ConversationMessage      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  participant   ConversationParticipant? @relation(fields: [participantId], references: [id], onDelete: SetNull)

  @@index([messageId])
}
