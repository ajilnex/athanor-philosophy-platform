generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum Role {
  VISITOR
  USER
  ADMIN
}

model Article {
  id          String   @id @default(cuid())
  title       String
  description String?
  author      String?
  fileName    String   @unique
  filePath    String
  fileSize    Int
  tags        String[]
  category    String?
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublished Boolean  @default(true)
  isSealed    Boolean  @default(false)
}

model Billet {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String
  excerpt     String?
  tags        String[]
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isSealed    Boolean  @default(false)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  comments       Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Polymorphe: soit billet soit publication
  targetType String   // 'billet' | 'publication'
  targetId   String   // slug pour billets, id pour publications
  
  // Hiérarchie (max 2 niveaux)
  parentId   String?
  parent     Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Comment[] @relation("CommentReplies")
  
  // Modération
  isApproved Boolean  @default(false)
  isVisible  Boolean  @default(true)
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([targetType, targetId, createdAt])
  @@index([parentId, createdAt])
  @@index([isApproved, isVisible])
  @@index([authorId])
}

