import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  const userEmail = 'aub.robert@gmail.com'
  
  try {
    console.log('üîó Liaison du compte GitHub...')
    
    // 1. V√©rifier si l'utilisateur existe
    const user = await prisma.user.findUnique({
      where: { email: userEmail },
      include: { accounts: true }
    })
    
    if (!user) {
      console.log('‚ùå Utilisateur non trouv√©')
      return
    }
    
    console.log(`üë§ Utilisateur trouv√©: ${user.name} (${user.email})`)
    console.log(`üîë R√¥le actuel: ${user.role}`)
    
    // 2. V√©rifier si un compte GitHub est d√©j√† li√©
    const existingGitHubAccount = user.accounts.find(acc => acc.provider === 'github')
    if (existingGitHubAccount) {
      console.log('‚úÖ Compte GitHub d√©j√† li√©')
      console.log(`   Provider Account ID: ${existingGitHubAccount.providerAccountId}`)
      return
    }
    
    // 3. Cr√©er la liaison GitHub
    // Note: Vous devrez fournir votre GitHub ID
    const githubUserId = process.argv[2]
    if (!githubUserId) {
      console.log('‚ùå Usage: npx tsx scripts/link-github-account.ts <github-user-id>')
      console.log('üí° Pour trouver votre GitHub ID, allez sur: https://api.github.com/user (connect√©)')
      return
    }
    
    await prisma.account.create({
      data: {
        userId: user.id,
        type: 'oauth',
        provider: 'github',
        providerAccountId: githubUserId,
        // Les autres champs peuvent √™tre null pour une liaison manuelle
      }
    })
    
    console.log('‚úÖ Compte GitHub li√© avec succ√®s!')
    console.log(`   GitHub User ID: ${githubUserId}`)
    console.log('üéØ Vous pouvez maintenant vous d√©connecter et vous reconnecter')
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

main()