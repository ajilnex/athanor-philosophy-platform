import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  try {
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: 'aub.robert@gmail.com' }
    })

    if (existingUser) {
      console.log('üë§ Utilisateur existant trouv√©, mise √† jour du r√¥le...')
      
      const updated = await prisma.user.update({
        where: { email: 'aub.robert@gmail.com' },
        data: { role: 'ADMIN' }
      })
      
      console.log('‚úÖ Utilisateur promu ADMIN:')
      console.log(`   Email: ${updated.email}`)
      console.log(`   R√¥le: ${updated.role}`)
      return
    }

    // Cr√©er un nouveau compte admin
    console.log('üÜï Cr√©ation d\'un nouveau compte admin...')
    
    // Hash d'un mot de passe temporaire
    const tempPassword = 'admin2025'
    const hashedPassword = await bcrypt.hash(tempPassword, 12)

    const newAdmin = await prisma.user.create({
      data: {
        email: 'aub.robert@gmail.com',
        name: 'Aubin Robert',
        role: 'ADMIN',
        hashedPassword: hashedPassword,
      },
    })

    console.log('‚úÖ Nouveau compte admin cr√©√©:')
    console.log(`   ID: ${newAdmin.id}`)
    console.log(`   Email: ${newAdmin.email}`)
    console.log(`   Nom: ${newAdmin.name}`)
    console.log(`   R√¥le: ${newAdmin.role}`)
    console.log(`   Mot de passe temporaire: ${tempPassword}`)
    console.log('')
    console.log('üîë Pour te connecter:')
    console.log(`   Email: aub.robert@gmail.com`)
    console.log(`   Mot de passe: ${tempPassword}`)
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

main()