import { PrismaClient } from '@prisma/client'
import { promises as fs } from 'fs'
import path from 'path'

const prisma = new PrismaClient()

async function main() {
  try {
    console.log('üîÑ Synchronisation des articles locaux...\n')
    
    const uploadsDir = path.join(process.cwd(), 'public', 'uploads')
    
    // Lire les fichiers dans le dossier uploads
    const files = await fs.readdir(uploadsDir)
    const pdfFiles = files.filter(f => f.endsWith('.pdf'))
    
    console.log(`üìÅ Trouv√© ${pdfFiles.length} fichiers PDF dans uploads/`)
    
    if (pdfFiles.length === 0) {
      console.log('‚ùå Aucun fichier PDF trouv√©')
      return
    }
    
    for (const fileName of pdfFiles) {
      const filePath = `/uploads/${fileName}`
      const fullPath = path.join(uploadsDir, fileName)
      
      // V√©rifier si d√©j√† en base
      const existing = await prisma.article.findFirst({
        where: { fileName }
      })
      
      if (existing) {
        console.log(`‚è≠Ô∏è  "${fileName}" d√©j√† en base`)
        continue
      }
      
      // Obtenir les stats du fichier
      const stats = await fs.stat(fullPath)
      const fileSize = stats.size
      
      // Nettoyer le nom pour le titre
      const title = fileName
        .replace(/^\d+_+/, '') // Retirer timestamp au d√©but
        .replace(/\.pdf$/, '') // Retirer .pdf
        .replace(/_+/g, ' ') // Remplacer _ par espaces
        .replace(/\s+/g, ' ') // Normaliser espaces
        .trim()
      
      // Cr√©er l'article
      const article = await prisma.article.create({
        data: {
          title,
          fileName,
          filePath,
          fileSize,
          author: 'Aubin Robert', // Par d√©faut
          tags: [], // PostgreSQL array, vide par d√©faut 
          isPublished: true,
        }
      })
      
      console.log(`‚úÖ Ajout√©: "${title}" (${Math.round(fileSize/1024)}KB)`)
    }
    
    // Statistiques finales
    const totalArticles = await prisma.article.count()
    console.log(`\nüìä Total: ${totalArticles} publication(s) en base`)
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

main()